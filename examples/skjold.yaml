# Skjold A,B,C case
# planning horizon = optimisation timesteps = ca 24 seem to gove shortest time (approximately)
# Larger planning horizon: more complex problem, but shorter iteration
# Shorter planning horizon: simpler problem, but longer iteration
# Assuming no updated forecasts (nowcasts), so no need to repeat optimisation
# (i.e. planning horizon = optimisation timesteps, and forecast_timesteps=0)

parameters:
  time_delta_minutes: 1440 # minutes per timestep (60*24=1440 = 1 day)
  # We optimise bulks of timesteps at a time, with no overlap:
  planning_horizon: 6 # timesteps included in each optimisation
  optimisation_timesteps: 6 # timesteps between each optimisation
  forecast_timesteps: 0 # don't use nowcasts
  el_reserve_margin: 10 # MW -1=no limit
  objective: penalty # minimise total penalty
  piecewise_repn: CC # piecewise implementation in pyomo (SOS2 is default, but does not work with CBC)

carriers:
  - id: el
    powerflow_method: transport

nodes:
  - id: external
  - id: skjold_A
  - id: skjold_B
  - id: skjold_C

edges:
  - id: e1
    carrier: el
    flow_max: 50.0
    node_from: external
    node_to: skjold_A
    length_km: 1 # ??
    power_loss_function: [[0, 25, 50], [0, 0.5, 5]] # power enering edge vs power loss
    #power_loss_function: [[0, 50], [0, 1]]
    #power_loss_function: [[0, 50], [0, 0]] # no loss
  - id: e2
    carrier: el
    node_from: skjold_A
    node_to: skjold_B
    flow_max: 50.0
    length_km: 1 #??
    power_loss_function: [[0, 25, 50], [0, 0.5, 5]]
  - id: e3
    carrier: el
    node_from: skjold_A
    node_to: skjold_C
    flow_max: 50.0
    length_km: 1 #??
    power_loss_function: [[0, 25, 50], [0, 0.5, 5]]
  - id: e4
    include: False
    carrier: el
    node_from: skjold_B
    node_to: skjold_C
    flow_max: 50.0
    length_km: 1 #??
    power_loss_function: [[0, 25, 50], [0, 0.5, 5]]

devices:
  - id: power_from_external
    model: powersource
    node_id: external
    flow_max: 50 # MW (power available to the rest of the system)
    #profile: curve_const
    penalty_function: [[0, 300.0], [0, 0]]
    reserve_factor: 0

  - id: el_demand_A
    model: sink_el
    name: Power demand SKjold A
    node_id: skjold_A
    flow_min: 100 # MW demand. This is multiplied with the profile value for each timestep
    flow_max: 100 # upper and lower limit on demand is assumed the same (fixed demand)
    profile: powerdemand_skjold_A
    reserve_factor: 0 # soes not contribute to spinning reserve
  - id: el_demand_B
    model: sink_el
    name: Power demand SKjold B
    node_id: skjold_B
    flow_min: 100
    flow_max: 100
    profile: powerdemand_skjold_B
    reserve_factor: 0
  - id: el_demand_C
    model: sink_el
    name: Power demand SKjold C
    node_id: skjold_C
    flow_min: 100
    flow_max: 100
    profile: powerdemand_skjold_C
    reserve_factor: 0

  - id: GT_A1
    model: powersource
    node_id: skjold_A
    flow_max: 20 # MW (power available to the rest of the system)
    penalty_function: # power output vs penalty
      [[0.0, 0.1, 10.0, 20.0], [0.0, 75000.0, 80000.0, 130000.0]]
    reserve_factor: 1 # unused capacity contributes 100% to reserve
  - id: GT_A2
    model: powersource
    node_id: skjold_A
    flow_max: 20 # MW (power available to the rest of the system)
    penalty_function:
      [[0.0, 0.1, 10.0, 20.0], [0.0, 75000.0, 80000.0, 130000.0]]
    reserve_factor: 1
  - id: GT_A3
    model: powersource
    node_id: skjold_A
    flow_max: 15 # MW (power available to the rest of the system)
    penalty_function:
      [[0.0, 0.1, 10.0, 15.0], [0.0, 60000.0, 70000.0, 100000.0]]
    reserve_factor: 1
  - id: GT_A4
    model: powersource
    node_id: skjold_A
    flow_max: 15 # MW (power available to the rest of the system)
    penalty_function:
      [[0.0, 0.1, 10.0, 15.0], [0.0, 60000.0, 70000.0, 100000.0]]
    reserve_factor: 1

  - id: GT_C1
    model: powersource
    node_id: skjold_C
    flow_max: 30 # MW (power available to the rest of the system)
    penalty_function:
      [
        [0.00, 0.10, 5.00, 15.00, 20.00, 25.00, 30.00],
        [0.0, 84000.0, 84000.0, 120000.0, 150000.0, 160000.0, 180000.0],
      ]
    reserve_factor: 1

profiles:
  # time between timesteps is given by the parameter "time_delta_minutes" (see beginning of file)
  #
  - id: powerdemand_skjold_A
    data: [0.25, 0.22, 0.35, 0.23, 0.27, 0.55, 0.42]
  - id: powerdemand_skjold_B
    data: [0.08, 0.07, 0.10, 0.175, 0.05, 0.05, 0.11]
  - id: powerdemand_skjold_C
    data: [0.35, 0.52, 0.50, 0.43, 0.37, 0.35, 0.47]
